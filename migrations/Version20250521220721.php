<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20250521220721 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // Step 1: Add the account_id column as NULLABLE first
        // For SQLite, CHAR(36) is fine. For other DBs, you might use UUID type if available.
        $this->addSql('ALTER TABLE recurring_expense ADD COLUMN account_id CHAR(36) DEFAULT NULL'); // Changed to allow NULL initially

        // Step 2: Populate the account_id for existing records
        // This ensures all existing rows get a valid account_id.
        $this->addSql("UPDATE recurring_expense SET account_id = (SELECT id FROM account WHERE code = 'PRINCIPAL')");

        // Step 3: Create an index on the new foreign key column (good for performance)
        $this->addSql('CREATE INDEX IDX_50203349B6B5048 ON recurring_expense (account_id)');

        // Step 4 (Optional for SQLite, more complex):
        // If you absolutely need the NOT NULL constraint at the DB level in SQLite,
        // it typically requires table recreation. For now, we'll rely on the entity's
        // nullable:false to enforce this for new data.
        // If this migration was generated by `doctrine:migrations:diff` after
        // the entity change, it would handle the SQLite specifics for NOT NULL.
        // Since we are populating all rows, the column effectively becomes NOT NULL in terms of data.
        // If your DB is not SQLite (e.g., PostgreSQL, MySQL), you could add:
        // $this->addSql('ALTER TABLE recurring_expense ALTER COLUMN account_id SET NOT NULL');
        // But for SQLite, this direct alter to NOT NULL is problematic.
    }

    public function down(Schema $schema): void
    {
        // Revert the changes in reverse order
        $this->addSql('DROP INDEX IDX_50203349B6B5048 ON recurring_expense');

        // Since we added it as nullable initially, we can just drop it.
        $this->addSql('ALTER TABLE recurring_expense DROP COLUMN account_id');
    }
}
