<?php

declare(strict_types=1);

namespace Tests\Application\Command;

use App\Application\Command\CreateOwnerCommand;
use App\Application\Command\CreateOwnerCommandHandler;
use App\Application\Port\Out\OwnerRepositoryInterface;
use App\Domain\Entity\Owner;
use App\Domain\ValueObject\OwnerId;
use PHPUnit\Framework\TestCase;
use PHPUnit\Framework\MockObject\MockObject;
use Tests\Fixture\Mother\OwnerMother; // Added

final class CreateOwnerCommandHandlerTest extends TestCase
{
    /** @var OwnerRepositoryInterface&MockObject */
    private $ownerRepositoryMock;
    private CreateOwnerCommandHandler $handler;

    protected function setUp(): void
    {
        $this->ownerRepositoryMock = $this->createMock(OwnerRepositoryInterface::class);
        $this->handler = new CreateOwnerCommandHandler($this->ownerRepositoryMock);
    }

    public function testHandleCreatesAndSavesOwner(): void
    {
        // Data can come from a Mother or be specific for the command
        $testOwnerData = OwnerMother::withSpecifics(
            null, // ID will be generated by handler/entity
            "Jane Doe From Mother",
            "jane.mother@example.com",
            "555-9876"
        );

        $command = new CreateOwnerCommand(
            $testOwnerData->getName(),
            $testOwnerData->getEmail(),
            $testOwnerData->getPhoneNumber()
        );

        $this->ownerRepositoryMock
            ->expects($this->once())
            ->method('save')
            ->with($this->callback(function (Owner $owner) use ($command) {
                $this->assertEquals($command->name, $owner->getName());
                $this->assertEquals($command->email, $owner->getEmail());
                $this->assertEquals($command->phoneNumber, $owner->getPhoneNumber());
                $this->assertNotNull($owner->getId());
                return true;
            }));

        $generatedOwnerId = $this->handler->handle($command);
        $this->assertNotNull($generatedOwnerId);
        $this->assertInstanceOf(OwnerId::class, $generatedOwnerId);
    }
}
